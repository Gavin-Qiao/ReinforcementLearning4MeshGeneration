# RL for Mesh Generation

This repository contains a Python implementation of the RL-based mesh generation algorithm presented in:

1. Pan, J., Huang, J., Wang, Y., Cheng, G., & Zeng, Y. (2021). A self-learning finite element extraction system based on reinforcement learning. *AI EDAM, 35(2)*, 180-208.
2. Pan, J., Huang, J., Cheng, G., & Zeng, Y. (2023). Reinforcement learning for automatic quadrilateral mesh generation: A soft actor–critic approach. *Neural Networks, 157*, 288-304.

If you use this implementation in your work, please add a reference/citation to the paper:


@article{pan2021self,
  title={A self-learning finite element extraction system based on reinforcement learning},
  author={Pan, Jie and Huang, Jingwei and Wang, Yunli and Cheng, Gengdong and Zeng, Yong},
  journal={AI EDAM},
  volume={35},
  number={2},
  pages={180--208},
  year={2021},
  publisher={Cambridge University Press}
}

@article{pan2023reinforcement,
  title={Reinforcement learning for automatic quadrilateral mesh generation: A soft actor--critic approach},
  author={Pan, Jie and Huang, Jingwei and Cheng, Gengdong and Zeng, Yong},
  journal={Neural Networks},
  volume={157},
  pages={288--304},
  year={2023},
  publisher={Elsevier}
}

### Mesh generation program installation & usage

Build your own virtual environment (if you don’t want to use any virtual environment you can skip this section)
You can use default pycharm environment, or virtual environment to deploy your project. For this tutorial I used Aanaconda as my virtual environment: https://www.anaconda.com/ And here is the command for managing your environment: https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html open your conda prompt in windows, if you already installed Anaconda, you can use search in windows to find the “conda prompt” here I am using a Mac so I directly using my “terminal”

1.Create env: my current env is (nml) conda create --name mesh
2.Switch env: conda activate mesh
3.Once you switched into your environment, the name in the round bracket would be changed into: (mesh)

Install dependencies
Use cd command to change your directory to project root

1.There is a file named “requirements” under “meshgeneration” directory
2.Type following command, if you installed python and set the python path (if you didn’t here is the link: https://www.youtube.com/watch?v=4Rx_JRkwAjY ) pip install -r requirements
Make sure you can use “pip” command to install dependencies because it is important. This command will automatically install all dependencies under your virtual/default environment directory, and the process usually takes longer than any other steps, so you can do something else.

Usage
The meshgeneration program is composed of two main components: ann and rl. Component ann contains the Ann model training and mesh generation.
Component rl is the responsible for the training by reinforcement learning algorithms.

RL training
1. Please go to folder "rl/baselines", you will find RL_Mesh.py file there and run it. Then the training will start.
   You can adjust the boundary domains by the initiation of class BoudaryEnv with different shape parameters.
   In the paper "A Self-learning Element Extraction System for Automatic Mesh Generation", the training domain is generated by function "boundary()" in file "ann/polygon.py". For example, "env = BoudaryEnv(boundary())".
   This command, "samples, output_types, outputs = env.extract_samples(env.generated_meshes)", can be used to extract samples from generated mesh elements when training.
   env.save_samples
   Command "env.save_samples(f'samples/{version}/ac_{i_episode}.json', {'samples': samples, 'output_types': output_types, 'outputs': outputs})" is used for writing those samples into file.


ANN training
1. Please go to ann folder, you will find EBRD.py this file and run the function "start_training()". The training process will start.

Final mesh generation
1. please go to ann folder, start "training()" function in file EBRD.py. The mesh generation process will start.

Boundary choose
1. Using code "boundary = read_polygon(file_name)", you will get a boundary object. The variable "file_name" is the path of geometrical objects, which can be found in "ui/domains/".
   In the paper "A Self-learning Element Extraction System for Automatic Mesh Generation", three domains are generated by:
   d1 = read_polygon('../ui/domains/boundary16.json'),
   d2 = read_polygon('../ui/domains/boundary15.json'),
   d3 = read_polygon('../ui/domains/test1.json').

Geometry object classes
1. In file "general/components.py", you will find classes of "Point2D, Vertex, Segment, Boundary2D, Mesh, and PointEnvironment" and their functions, which are called by previous main training functions.

Tensorboard
