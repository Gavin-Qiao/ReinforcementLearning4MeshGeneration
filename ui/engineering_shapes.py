import matplotlib.pyplot as plt
import numpy as np
#
# # # Define the coordinates for S1210 airfoil
# x_coords = [10.0, 9.984, 9.94, 9.875, 9.791, 9.681, 9.544, 9.38, 9.19, 8.975, 8.738, 8.478, 8.198, 7.9, 7.585, 7.256, 6.915, 6.564, 6.206, 5.842, 5.476, 5.111, 4.747, 4.389, 4.038, 3.696, 3.365, 3.046, 2.735, 2.434, 2.144, 1.868, 1.607, 1.362, 1.135, 0.927, 0.739, 0.572, 0.428, 0.307, 0.205, 0.124, 0.063, 0.022, 0.002, 0.002, 0.034, 0.103, 0.207, 0.342, 0.505, 0.696, 0.912, 1.151, 1.412, 1.691, 1.991, 2.316, 2.667, 3.043, 3.44, 3.857, 4.291, 4.737, 5.192, 5.652, 6.111, 6.567, 7.013, 7.445, 7.857, 8.246, 8.607, 8.935, 9.226, 9.475, 9.679, 9.83, 9.928, 9.983, 10.0]
# y_coords = [0.0, 0.01, 0.04, 0.083, 0.132, 0.181, 0.233, 0.287, 0.344, 0.403, 0.464, 0.525, 0.588, 0.651, 0.713, 0.775, 0.835, 0.893, 0.949, 1.002, 1.05, 1.095, 1.134, 1.165, 1.189, 1.205, 1.209, 1.2, 1.178, 1.146, 1.105, 1.056, 0.999, 0.936, 0.867, 0.793, 0.715, 0.633, 0.548, 0.459, 0.367, 0.276, 0.187, 0.103, 0.028, -0.035, -0.077, -0.107, -0.132, -0.153, -0.169, -0.179, -0.183, -0.181, -0.171, -0.152, -0.118, -0.07, -0.012, 0.05, 0.116, 0.181, 0.245, 0.303, 0.355, 0.399, 0.432, 0.454, 0.465, 0.463, 0.448, 0.421, 0.384, 0.336, 0.281, 0.219, 0.153, 0.089, 0.039, 0.009, 0.0]
#
# shape = [(10.0, 0.0), (9.984, 0.01), (9.94, 0.04), (9.875, 0.083), (9.791, 0.132), (9.681, 0.181), (9.544, 0.233), (9.38, 0.287), (9.19, 0.344), (8.975, 0.403), (8.738, 0.464), (8.478, 0.525), (8.198, 0.588), (7.9, 0.651), (7.585, 0.713), (7.256, 0.775), (6.915, 0.835), (6.564, 0.893), (6.206, 0.949), (5.842, 1.002), (5.476, 1.05), (5.111, 1.095), (4.747, 1.134), (4.389, 1.165), (4.038, 1.189), (3.696, 1.205), (3.365, 1.209), (3.046, 1.2), (2.735, 1.178), (2.434, 1.146), (2.144, 1.105), (1.868, 1.056), (1.607, 0.999), (1.362, 0.936), (1.135, 0.867), (0.927, 0.793), (0.739, 0.715), (0.572, 0.633), (0.428, 0.548), (0.307, 0.459), (0.205, 0.367), (0.124, 0.276), (0.063, 0.187), (0.022, 0.103), (0.002, 0.028), (0.002, -0.035), (0.034, -0.077), (0.103, -0.107), (0.207, -0.132), (0.342, -0.153), (0.505, -0.169), (0.696, -0.179), (0.912, -0.183), (1.151, -0.181), (1.412, -0.171), (1.691, -0.152), (1.991, -0.118), (2.316, -0.07), (2.667, -0.012), (3.043, 0.05), (3.44, 0.116), (3.857, 0.181), (4.291, 0.245), (4.737, 0.303), (5.192, 0.355), (5.652, 0.399), (6.111, 0.432), (6.567, 0.454), (7.013, 0.465), (7.445, 0.463), (7.857, 0.448), (8.246, 0.421), (8.607, 0.384), (8.935, 0.336), (9.226, 0.281), (9.475, 0.219), (9.679, 0.153), (9.83, 0.089), (9.928, 0.039), (9.983, 0.009), (10.0, 0.0)]
# # # Plot the airfoil
# # plt.figure(figsize=(10, 5))
# # plt.plot(x_coords, y_coords, marker='o', color='blue', label='S1210 Airfoil')
# #
# # # Add labels and title
# # plt.title('S1210 Airfoil')
# # plt.xlabel('x-coordinate')
# # plt.ylabel('y-coordinate')
# # plt.grid(True)
# # plt.legend()
# # plt.axis('equal')  # Ensure the aspect ratio is equal for proper scaling
# # plt.show()
#
#
# # Define the corners of the box
# corners = [(-1, -2), (11, -2), (11, 3), (-1, 3)]
#
# # Define the unit length
# unit_length = 0.5
#
# # Generate points along each side of the box
# def generate_boundary_points(corners, unit_length):
#     boundary_points = []
#
#     # Bottom side
#     x_values = np.arange(corners[0][0], corners[1][0] + unit_length, unit_length)
#     boundary_points.extend([(x, corners[0][1]) for x in x_values])
#
#     # Right side
#     y_values = np.arange(corners[1][1], corners[2][1] + unit_length, unit_length)
#     boundary_points.extend([(corners[1][0], y) for y in y_values])
#
#     # Top side
#     x_values = np.arange(corners[2][0], corners[3][0] - unit_length, -unit_length)
#     boundary_points.extend([(x, corners[2][1]) for x in x_values])
#
#     # Left side
#     y_values = np.arange(corners[3][1], corners[0][1] - unit_length, -unit_length)
#     boundary_points.extend([(corners[3][0], y) for y in y_values])
#
#     return boundary_points
#
# # Generate the points
# boundary_points = generate_boundary_points(corners, unit_length)
#
# print(boundary_points)
# # Print the generated points
# # for point in boundary_points:
# #     print(point)
#
# box = [(-1.0, -2), (-0.5, -2), (0.0, -2), (0.5, -2), (1.0, -2), (1.5, -2), (2.0, -2), (2.5, -2), (3.0, -2), (3.5, -2), (4.0, -2), (4.5, -2), (5.0, -2), (5.5, -2), (6.0, -2), (6.5, -2), (7.0, -2), (7.5, -2), (8.0, -2), (8.5, -2), (9.0, -2), (9.5, -2), (10.0, -2), (10.5, -2), (11.0, -2), (11, -2.0), (11, -1.5), (11, -1.0), (11, -0.5), (11, 0.0), (11, 0.5), (11, 1.0), (11, 1.5), (11, 2.0), (11, 2.5), (11, 3.0), (11.0, 3), (10.5, 3), (10.0, 3), (9.5, 3), (9.0, 3), (8.5, 3), (8.0, 3), (7.5, 3), (7.0, 3), (6.5, 3), (6.0, 3), (5.5, 3), (5.0, 3), (4.5, 3), (4.0, 3), (3.5, 3), (3.0, 3), (2.5, 3), (2.0, 3), (1.5, 3), (1.0, 3), (0.5, 3), (0.0, 3), (-0.5, 3), (-1.0, 3), (-1, 3.0), (-1, 2.5), (-1, 2.0), (-1, 1.5), (-1, 1.0), (-1, 0.5), (-1, 0.0), (-1, -0.5), (-1, -1.0), (-1, -1.5), (-1, -2.0)]
#

# box_1 = [(-1.0, -2), (-0.5, -2), (0.0, -2), (0.5, -2), (1.0, -2), (1.5, -2),
#        (2.0, -2), (2.5, -2), (3.0, -2), (3.5, -2), (4.0, -2), (4.5, -2),
#        (5.0, -2), (5.03, -1.61), (5.06, -1.22), (5.096, -0.82), (5.128, -0.43), (5.16, -0.037),
#
#     (5.192, 0.355), (4.737, 0.303), (4.291, 0.245), (3.857, 0.181),
#     (3.44, 0.116), (3.043, 0.05), (2.667, -0.012), (2.316, -0.07), (1.991, -0.118),
#     (1.691, -0.152), (1.412, -0.171), (1.151, -0.181), (0.912, -0.183),
#     (0.696, -0.179), (0.505, -0.169), (0.342, -0.153), (0.207, -0.132),
#     (0.103, -0.107), (0.034, -0.077), (0.002, -0.035), (0.002, 0.028),
#     (0.022, 0.103), (0.063, 0.187), (0.124, 0.276), (0.205, 0.367),
#     (0.307, 0.459), (0.428, 0.548), (0.572, 0.633), (0.739, 0.715),
#     (0.927, 0.793), (1.135, 0.867), (1.362, 0.936), (1.607, 0.999),
#     (1.868, 1.056), (2.144, 1.105), (2.434, 1.146), (2.735, 1.178),
#     (3.046, 1.2), (3.365, 1.209), (3.696, 1.205), (4.038, 1.189),
#     (4.389, 1.165), (4.747, 1.134), (5.111, 1.095), (5.476, 1.05),
#     (5.842, 1.002), (6.206, 0.949), (6.564, 0.893), (6.915, 0.835),
#     (7.256, 0.775), (7.585, 0.713), (7.9, 0.651), (8.198, 0.588),
#     (8.478, 0.525), (8.738, 0.464), (8.975, 0.403), (9.19, 0.344),
#     (9.38, 0.287), (9.544, 0.233), (9.681, 0.181), (9.791, 0.132),
#     (9.875, 0.083), (9.94, 0.04), (9.984, 0.01), (10.0, 0.0),
#     (9.983, 0.009), (9.928, 0.039), (9.83, 0.089), (9.679, 0.153),
#     (9.475, 0.219), (9.226, 0.281), (8.935, 0.336), (8.607, 0.384), (8.246, 0.421),
#     (7.857, 0.448), (7.445, 0.463), (7.013, 0.465), (6.567, 0.454), (6.111, 0.432),
#     (5.652, 0.399), (5.2, 0.355), (5.17, -0.037),(5.13, -0.43), (5.1, -0.82), (5.07, -1.22),
#
#     (5.04, -1.61), (5.02, -2), (5.5, -2), (6.0, -2), (6.5, -2), (7.0, -2), (7.5, -2),
#        (8.0, -2), (8.5, -2), (9.0, -2), (9.5, -2), (10.0, -2), (10.5, -2),
#        (11.0, -2), (11, -1.5), (11, -1.0), (11, -0.5), (11, 0.0),
#        (11, 0.5), (11, 1.0), (11, 1.5), (11, 2.0), (11, 2.5), (11, 3.0), (10.5, 3), (10.0, 3), (9.5, 3), (9.0, 3), (8.5, 3),
#        (8.0, 3), (7.5, 3), (7.0, 3), (6.5, 3), (6.0, 3), (5.5, 3),
#        (5.0, 3), (4.5, 3), (4.0, 3), (3.5, 3), (3.0, 3), (2.5, 3),
#        (2.0, 3), (1.5, 3), (1.0, 3), (0.5, 3), (0.0, 3), (-0.5, 3),
#        (-1.0, 3), (-1, 2.5), (-1, 2.0), (-1, 1.5), (-1, 1.0),
#        (-1, 0.5), (-1, 0.0), (-1, -0.5), (-1, -1.0), (-1, -1.5)]

def box():
    box_1 = [(-3.0, -2), (-2.5, -2), (-2.0, -2), (-1.5, -2), (-1.0, -2), (-0.5, -2), (0.0, -2), (0.5, -2), (1.0, -2), (1.5, -2),
           (2.0, -2), (2.5, -2), (3.0, -2), (3.5, -2), (4.0, -2), (4.5, -2),

           (5.0, -2), (5.03, -1.61), (5.06, -1.22), (5.096, -0.82), (5.128, -0.43), (5.16, -0.037),
        (5.192, 0.355), (4.737, 0.303), (4.291, 0.245), (3.857, 0.181),
        (3.44, 0.116), (3.043, 0.05), (2.667, -0.012), (2.316, -0.07), (1.991, -0.118),
        (1.691, -0.152), (1.412, -0.171), (1.151, -0.181), (0.912, -0.183),
         (0.605, -0.169), (0.207, -0.132),
         (0.002, -0.035), (0.063, 0.187), (0.205, 0.367),
         (0.428, 0.548),  (0.669, 0.665),
        (0.927, 0.793), (1.135, 0.867), (1.362, 0.936), (1.607, 0.999),
        (1.868, 1.056), (2.144, 1.105), (2.434, 1.146), (2.735, 1.178),
        (3.046, 1.2), (3.365, 1.209), (3.696, 1.205), (4.038, 1.189),
        (4.389, 1.165), (4.747, 1.134), (5.111, 1.095), (5.476, 1.05),
        (5.842, 1.002), (6.206, 0.949), (6.564, 0.893), (6.915, 0.835),
        (7.256, 0.775), (7.585, 0.713), (7.75, 0.541), (7.445, 0.463), (7.013, 0.465), (6.567, 0.454), (6.111, 0.432),
        (5.652, 0.399), (5.2, 0.355), (5.17, -0.037),(5.13, -0.43), (5.1, -0.82), (5.07, -1.22), (5.04, -1.61),

        (5.02, -2), (5.5, -2), (6.0, -2), (6.5, -2), (7.0, -2), (7.5, -2),
           (8.0, -2), (8.5, -2), (9.0, -2), (9.5, -2), (10.0, -2), (10.5, -2),
           (11.0, -2), (11, -1.5), (11, -1.0), (11, -0.5), (11, 0.0),
           (11, 0.5), (11, 1.0), (11, 1.5), (11, 2.0), (11, 2.5), (11, 3.0), (10.5, 3), (10.0, 3), (9.5, 3), (9.0, 3), (8.5, 3),
           (8.0, 3), (7.5, 3), (7.0, 3), (6.5, 3), (6.0, 3), (5.5, 3),
           (5.0, 3), (4.5, 3), (4.0, 3), (3.5, 3), (3.0, 3), (2.5, 3),
           (2.0, 3), (1.5, 3), (1.0, 3), (0.5, 3), (0.0, 3), (-0.5, 3),
           (-1.0, 3), (-1.5, 3), (-2, 3), (-2.5, 3), (-3, 3), (-3, 2.5), (-3, 2.0), (-3, 1.5), (-3, 1.0),
           (-3, 0.5), (-3, 0.0), (-3, -0.5), (-3, -1.0), (-3, -1.5)]
    return box_1


def plot_shape(shape):
    print([[x[0]*100, x[1]*100] for x in shape[::-1]])

    # Prepare data for plotting
    x_connected, y_connected = zip(*shape)

    # Plot the combined shape
    plt.figure(figsize=(10, 6))
    plt.plot(x_connected, y_connected, marker='o', linestyle='-', color='b')
    plt.title('Connected Shape')
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')
    # plt.xlim(-2, 12)
    plt.ylim(-3, 4)
    plt.grid()
    plt.axhline(0, color='gray', lw=0.5, ls='--')  # Add x-axis line
    plt.axvline(0, color='gray', lw=0.5, ls='--')  # Add y-axis line
    plt.show()


def generate_evenly_spaced_points(start_point, end_point, num_points):
    # Generate evenly spaced points between start_point and end_point
    points = [
        (
            start_point[0] + (end_point[0] - start_point[0]) * (i / (num_points - 1)),
            start_point[1] + (end_point[1] - start_point[1]) * (i / (num_points - 1))
        ) for i in range(num_points)
    ]
    return points


# # Define the start and end points
# start_point = (5.0, -2)
# end_point = (5.192, 0.355)
#
# # Number of points to generate
# num_points = 7
#
# # Generate the points
# points = generate_evenly_spaced_points(start_point, end_point, num_points)
#
# # Print the generated points
# print(points)


if __name__ == '__main__':
    plot_shape(box())